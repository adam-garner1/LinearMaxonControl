<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="IDXMotor" Id="{2d0ab0a1-a5a3-4c64-bc51-ecb0c0b67505}" SpecialFunc="None">
    <Declaration><![CDATA[   // function to house all commmands to do with idx motor 

FUNCTION_BLOCK IDXMotor IMPLEMENTS I_Motor
VAR_INPUT
	//
END_VAR
VAR_OUTPUT
END_VAR
VAR	

	Axis: AXIS_REF;
	//Enabled: BOOL := FALSE;
	Override: LREAL:=100;
	MotorError AT%I*	:WORD;
	MotorErrorSent : WORD;
	AxisErrorSent:UDINT;
	NCError : WORD;
	fbMessage : FB_TcMessage;
	EnableEventSent:BOOL:= TRUE;
	HomeEventSent:BOOL:=TRUE;
    fbAxisMoveAbsolute: MC_MoveAbsolute;	
	fbMcHome: MC_Home;
	fbAxisPower: MC_Power;
	fbReset: MC_Reset;
	fbMoveRel : MC_MoveRelative;
	MotorResetBit :REFERENCE TO USINT;
	MQTTevents: REFERENCE TO FB_IotMqttClient;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Axis.ReadStatus();

// cyclic events below 

IF NOT (MotorError = MotorErrorSent) THEN// Creates Event 
	MotorErrorSent:= MotorError;
	fbMessage.CreateEx(TC_Events.LinearMotor.IDXmotorError,0);
	fbMessage.ipArguments.Clear().AddDWord(MotorError);
	fbMessage.Send(0);
END_IF

IF NOT (Axis.NcToPlc.ErrorCode = AxisErrorSent) THEN// Creates Event 
	AxisErrorSent:= Axis.NcToPlc.ErrorCode;
	fbMessage.CreateEx(TC_Events.LinearMotor.AxisError,0);
	fbMessage.ipArguments.Clear().AddDWord(Axis.NcToPlc.ErrorCode);
	fbMessage.Send(0);
END_IF

]]></ST>
    </Implementation>
    <Method Name="Enable" Id="{6ca24d5a-5a8e-43ff-a8c3-908b75374a87}">
      <Declaration><![CDATA[
METHOD PUBLIC Enable : BOOL
VAR_INPUT
EnableMotor :BOOL;
END_VAR



VAR
	PayloadPub: STRING :='Enabled';
	test: STRING;
	testlen: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[	fbAxisPower( // use in idx class
    Axis:= Axis,
    Enable:= EnableMotor,
    Enable_Positive:= EnableMotor,
    Enable_Negative:= EnableMotor,
    Override:= Override,
	Status=>Enable,
	Error=>
);
	

IF EnableMotor = EnableEventSent THEN	
	EnableEventSent := NOT EnableEventSent;
IF EnableMotor THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.Motor_enabled,0);
ELSE
	fbMessage.CreateEx(TC_Events.LinearMotor.Motor_disabled,0);
END_IF
fbMessage.Send(0);
END_IF
fbMessage.RequestEventText(nLangId:=1033,sResult:=PayloadPub,nResultSize:=80);	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Estop" Id="{ac352b5d-b443-47be-8d49-18781876fd67}">
      <Declaration><![CDATA[METHOD Estop : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//stop motor mc stop ]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{98ef687f-1654-43bd-b72b-b96bfe4346b9}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ResetBit : REFERENCE TO USINT ;
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Axis :=AXIS_REF;
MotorResetBit REF= ResetBit;
fbMessage.CreateEx(TC_Events.LinearMotor.PLC_restarted,0);
	fbMessage.Send(0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{dadfc02e-e1cb-43e2-bcd9-54c8e8b7850a}">
      <Declaration><![CDATA[METHOD PUBLIC Home : BOOL
VAR_IN_OUT
	Execute:BOOL;
END_VAR
VAR
	HomingDone:BOOL;
	HomingError:BOOL;
	HomingErrorID:UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// try changing limits to no error mode then home 


	fbMcHome(
	Axis:=Axis,
	Execute:=Execute,
	Position:=510,
	HomingMode:=MC_DefaultHoming,
	Busy=>Home,
	Done=>HomingDone,
	Error=> HomingError,
	ErrorID=> HomingErrorID
);
IF Home THEN
	Execute:= FALSE;
END_IF

IF Execute THEN
	HomeEventSent:= FALSE;
	fbMessage.CreateEx(TC_Events.LinearMotor.Homing,0);
	fbMessage.Send(0);
	//Execute:= FALSE;	
END_IF
IF HomingDone THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.HomingComplete,0);
	fbMessage.Send(0);
END_IF

IF HomingError THEN
	Execute:= FALSE;
	fbMessage.CreateEx(TC_Events.LinearMotor.HomingFailed,0);
	fbMessage.ipArguments.Clear().AddDWord(HomingErrorID);
	fbMessage.Send(0);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Homed" Id="{c1cc68f4-37cf-40df-838e-d05e58b07ab5}">
      <Declaration><![CDATA[METHOD PUBLIC Homed : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Homed:=Axis.NcToPlc.StateDWord.1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveRelative" Id="{b8493f8e-43b3-46fb-816b-e627b7c74ccc}">
      <Declaration><![CDATA[METHOD MoveRelative : BOOL
VAR_INPUT
	Distance: LREAL;
	Velocity: LREAL;	
END_VAR
VAR_IN_OUT
	Execute: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	fbMoveRel( // in idx class 
    Axis:= Axis,
    Execute:= Execute,
    Distance:= Distance,
    Velocity:= Velocity,);
	
		IF Execute THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.RelativeMove,0);
	fbMessage.ipArguments.Clear();
	fbMessage.ipArguments.AddLReal(Distance);
	fbMessage.ipArguments.AddLReal(Velocity);
	fbMessage.Send(0);
	Execute := FALSE;
END_IF

IF fbMoveRel.Done  THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.MoveComplete,0);
	fbMessage.Send(0);
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveTo" Id="{08282b44-b328-422b-9de4-f7d3248d3805}">
      <Declaration><![CDATA[METHOD MoveTo : BOOL
VAR_INPUT
	Position: LREAL;
	Velocity: LREAL;	
END_VAR

VAR_OUTPUT
	State: e_MCState;
END_VAR

VAR_IN_OUT
		Execute: BOOL;
END_VAR

VAR
	Done :BOOL;
	Busy:BOOL;
	Active:BOOL;// unknown what to do with this 
	Error:BOOL;
	CommandAborted: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	fbAxisMoveAbsolute(  
    Axis:= Axis,
    Execute:= Execute,
    Position:= Position,
    Velocity:= Velocity,
	Done=> Done,
	Busy=>Busy,
	Active=> Active,
	Error=>Error,
	CommandAborted=>CommandAborted);
	
IF Done THEN
	State:= e_MCState.Done;
END_IF

IF Busy THEN
	State:= e_MCState.Busy;
END_IF

IF CommandAborted THEN
	State:= e_MCState.CommandAborted;
END_IF

IF Active THEN
	State:= e_MCState.Active;
END_IF
IF NOT Done AND NOT Busy AND NOT Active THEN
	State := e_MCState.Idle;
END_IF

IF Error THEN
	State:= e_MCState.Error;
END_IF
	
	IF Execute THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.MotorMove,0);
	fbMessage.ipArguments.Clear();
	fbMessage.ipArguments.AddLReal(Position);
	fbMessage.ipArguments.AddLReal(Velocity);
	fbMessage.Send(0);
	Execute := FALSE;
	

END_IF

IF fbAxisMoveAbsolute.Done  THEN
	fbMessage.CreateEx(TC_Events.LinearMotor.MoveComplete,0);
	fbMessage.Send(0);


	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Position" Id="{ff434356-d1e2-4881-8909-8666bf1f21d4}">
      <Declaration><![CDATA[METHOD Position : LReal
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Position:= Axis.NcToPlc.ActPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{452ee707-d051-4151-ab20-88e260d22e2a}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_IN_OUT
	ResetAxis:BOOL;
	//IDXControlByte1 :USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbReset(
Axis:=Axis,
Execute:=ResetAxis,
Done =>Reset);

IF resetAxis THEN
//IDXControlByte1 := 16#80;// restop linear Motor
MotorResetBit := 16#80;
fbMessage.CreateEx(TC_Events.LinearMotor.AxisReset,0);
fbMessage.send(0);
resetAxis := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSpeed" Id="{50ebda3b-70f1-42c9-9731-437c5d2aad8f}">
      <Declaration><![CDATA[METHOD SetSpeed : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Status" Id="{f73b2d03-d3bf-443e-8d2d-9005fec7bb7e}">
      <Declaration><![CDATA[METHOD PUBLIC Status : ST_AxisStatus
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Status := Axis.Status;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="IDXMotor">
      <LineId Id="9" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="28" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="70" Count="6" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Enable">
      <LineId Id="7" Count="5" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="30" Count="7" />
      <LineId Id="29" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Estop">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Home">
      <LineId Id="49" Count="2" />
      <LineId Id="9" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="14" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="15" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Homed">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.MoveRelative">
      <LineId Id="9" Count="3" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="11" />
      <LineId Id="36" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.MoveTo">
      <LineId Id="9" Count="4" />
      <LineId Id="85" Count="3" />
      <LineId Id="114" Count="0" />
      <LineId Id="97" Count="2" />
      <LineId Id="101" Count="0" />
      <LineId Id="103" Count="2" />
      <LineId Id="102" Count="0" />
      <LineId Id="107" Count="2" />
      <LineId Id="106" Count="0" />
      <LineId Id="118" Count="2" />
      <LineId Id="117" Count="0" />
      <LineId Id="121" Count="2" />
      <LineId Id="111" Count="2" />
      <LineId Id="110" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="15" Count="4" />
      <LineId Id="65" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="64" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Position">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Reset">
      <LineId Id="9" Count="5" />
      <LineId Id="16" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.SetSpeed">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="IDXMotor.Status">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>