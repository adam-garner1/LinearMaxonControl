<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{4e8483c1-ccbb-4128-b543-7a53eb2e77a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT 

	SafetyModuleArraySize :UINT:=1;
	EstopArraySize :UINT := 1;
END_VAR
VAR
	LinearErrorArray : ST_IDXError;
	LinearMotor :FB_Motion(AxisNameIn := 'M3 Linear');
	LinearBrake AT%Q*:BOOL;
	fbIDXError: FB_IDXError(AxisNameIn := 'M3 Linear');


	SafetySystem : FB_SafetySystemMonitor;
	AGSafeInputs : FB_EL1918Monitor(Namein:='AGSafeInputs',ElectricalRefin:='K7',Addressin:=1008);
	AGSafeOutputs : FB_EL2904Monitor(NameIn:='AGSafeOutputs',ElectricalRefIn:='K8',AddressIn:=1010);
	AGEstop: FB_SafetyEstopMonitor(NameIn:='A&G Box');

	OffMountEstop :FB_SafetyEstopMonitor(NameIn:='Off Mount');

	fbDigitalInputMonitor : FB_EthercatModuleMonitor(NameIn:='AGDigitalInput',ElectricalRefIn:='K2',AddressIn:=1009);
	fbLinearMotorMonitor : FB_EthercatModuleMonitor(NameIn:='AGLinearMotorInput',ElectricalRefIn:='M2',AddressIn:=1003);
	fbSafetyMasterMonitor : FB_EthercatModuleMonitor(NameIn:='SafetyMaster',ElectricalRefIn:='K1',AddressIn:=1001);
	
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	SafetyModuleStatus : ARRAY[0..SafetyModuleArraySize] OF ST_SafetyModule;
	fbsafetyModuleCollector :FB_SafetyModuleCollector;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	EstopArray : ARRAY [0..EstopArraySize] OF ST_EstopFB;
	fbEstopFBCollector : FB_EstopFBCollector;

	fbEverest :EverestMC();
	LinearEncoder: AXIS_REF;
	Force: AXIS_REF;
	fbIDXResetError : FB_IDXResetError(AxisNameIn := 'M3 Linear');
	ResetError :BOOL;
	GetUPSStatus : FB_GetUPSStatus;
	ReadUPSStatus:BOOL := TRUE;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	fbAGPowerStatus : fbAGPowerStatus;

	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	UPSStatus: ST_UPSStatus;
	UPSStatusValid:BOOL;
	
	Instruments :ARRAY[0..4] OF Instrument ;
	{attribute 'OPC.UA.DA' := '1'}
	DemoMode: BOOL;
	CurrentInstrument:INT;
	Change_Inst :TON:= (PT:=T#10S,IN:=FALSE);
	CurrentInstName:STRING;
	
	
	
	ForceAvg : FB_CTRL_MOVING_AVERAGE;
	ForceAvgArray: ARRAY[0..100] OF LREAL;
	ForceAvgParas : ST_CTRL_MOVING_AVERAGE_PARAMS := (
tCtrlCycleTime:= T#100MS,
tTaskCycleTime:= T#10MS,
nSamplesToFilter:=100,
pWorkArray_ADR:= ADR(ForceAvgArray),
nWorkArray_SIZEOF:= 800);


	
	{attribute 'OPC.UA.DA' := '1'}
	IdxEnable:BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	EveEnable:BOOL;

	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	Estop: BOOL;
	RotationHome :BOOL:=FALSE;
	LinearResetAxis :BOOL:=FALSE;
	LinearResetNC	:BOOL := FALSE;
	RotationresetAxis :BOOL:=FALSE;
	FBLInearEncHome :MC_Home;
LinearEncHome:BOOL;
LinearHomePosition:LREAL;



LinearBrakeRawData AT %I* :INT;
LinearBrakePressure		:LREAL; //bar
LinearBrakeMinOperatingPressure:LREAL:= 5.0; //bar
LinearBrakeUnderPressure :BOOL;
fbLinearBrakePressureScale :FB_CTRL_SCALE;
LinearBrakeScaleParams : ST_CTRL_SCALE_PARAMS:=(
	fInMax:=10000.0,//mv
	fInMin:=0.0,//mv
	fOutMax:=10.0,//bar
	fOutMin:= 0.0,//bar
	tCtrlCycleTime:=T#500MS,
	tTaskCycleTime:= T#10MS);
BrakeUnderPressureTimer :ton := (PT:= T#250MS); // timer prevents small dips of pressure during valves opens to disable motor

	
	{attribute 'OPC.UA.DA' := '1'}
	LinearAxisState: LinearStates; (*~ (OPC:1:linear axis status ) *)
	{attribute 'OPC.UA.DA' := '1'}
	LinearCommandedPosition:LREAL:=400;

	LinearMove:BOOL;
	LinearMoveState: e_MCState;
	{attribute 'OPC.UA.DA' := '1'}
	LinearErrorACK:BOOL:=FALSE;
	{attribute 'OPC.UA.DA' := '1'}
	LinearMovementSpeed:LREAL:=50;
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	LinearStatus :ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
{attribute 'OPC.UA.DA.Description' := 'Position of Linear Stage'}
	LinearPosition  : LREAL;
	

	
	
	RotationStatus: ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	RotationPosition: LREAL;
	LinearHome: BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	RotationAxisState: RotationStates;
	{attribute 'OPC.UA.DA' := '1'}
	RotationCommandedPosition: LREAL:=60;
	{attribute 'OPC.UA.DA' := '1'}
	RotationMovementSpeed: LREAL:=20;
	RotationMove: BOOL;
	HomingBusy: BOOL;
	
	



	RotationErrorACK: BOOL;
	SafetyMasterStatus: ST_EthercatStatus;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
	
//standard module monitoring 
fbDigitalInputMonitor();
fbLinearMotorMonitor();
fbSafetyMasterMonitor();
fbSafetyMasterMonitor.GetEthercatStatus(stEthercatStatusOut=>SafetyMasterStatus);

SafetySystem.SetMasterStatus(StEthercatStatusIn:=SafetyMasterStatus);
SafetySystem();
Estop := SafetySystem.GetGlobalEstopStatus(); // true means system running 
//SafetyModules 
AGSafeInputs();
fbsafetyModuleCollector.GetSafetyStatus(StModuleArrayInOut:= SafetyModuleStatus,
 										ModuleArraySizeIn:=SafetyModuleArraySize,
										SafetyModuleRefIn:= AGSafeInputs,
										ModuleIndexIn:=0);
AGSafeOutputs();
fbsafetyModuleCollector.GetSafetyStatus(StModuleArrayInOut:= SafetyModuleStatus,
 										ModuleArraySizeIn:=SafetyModuleArraySize,
										SafetyModuleRefIn:= AGSafeOutputs,
										ModuleIndexIn:=1);
 //EstopGroups 
AGEstop();
OffMountEstop();
fbEstopFBCollector.GetEstopData(SafetyEstopRefIn:= AGEstop,
								stEstopArrayInOut:= EstopArray,
								EstopArraySizeIn:= EstopArraySize,
								EstopIndexIn:=0);
fbEstopFBCollector.GetEstopData(SafetyEstopRefIn:= OffMountEstop,
								stEstopArrayInOut:= EstopArray,
								EstopArraySizeIn:= EstopArraySize,
								EstopIndexIn:=1);
fbEstopFBCollector.MasterDataValid(DataValidIn:= SafetyMasterStatus.DataValid);
// DataCollectors 
fbsafetyModuleCollector(stModuleArrayInOut:= SafetyModuleStatus, ModuleArraySizeIn:=SafetyModuleArraySize);
fbEstopFBCollector(stEstopArrayInOut:= EstopArray, EstopArraySizeIn:= EstopArraySize);


//fbIDXError(Axis := fbIDX70.axis);
//fbIDXError.GetErrorStructure(StIDXErrorOut=> stIDXError);


LinearEncoder.ReadStatus();
Force.ReadStatus();

LinearMotor();
fbEverest();
fbAGPowerStatus();



// AND IdxEnable AND EveEnable
IF DemoMode  AND Change_Inst.Q  THEN
	CurrentInstrument:= (CurrentInstrument+1) MOD 4;
	Change_Inst(IN :=FALSE);
	LinearCommandedPosition:= (CurrentInstrument*75);
	RotationCommandedPosition:= (CurrentInstrument*60)-120;
	CurrentInstName := Instruments[CurrentInstrument].Name;
ELSIF  NOT DemoMode THEN
	CurrentInstName :=' None Selected ';
ELSE 
	Change_Inst(IN :=TRUE);

	
END_IF



ForceAvg(
 fIn:= Force.NcToPlc.ActPos,
stParams:= ForceAvgParas,
eMode:= E_CTRL_MODE.eCTRL_MODE_ACTIVE);
	

	FBLinearEncHome(
	Axis:=LinearEncoder,
	Execute:=LinearEncHome,
	Position:=LinearHomePosition,
	HomingMode:=MC_Direct);
	


	
GetUPSStatus(sNetId:='',
	Nport:=0,  (* 0 = Windows UPS service / Windows Battery driver  *)
	bEnable:= ReadUPSStatus,
	bValid=>UPSStatusValid,
	stStatus=> UPSStatus);



fbIDXError(Axis:=LinearMotor.Axis);
fbIDXError.GetErrorStructure(StIDXErrorOut=> LinearErrorArray);
//fbMotionEventSender.MotorError(stIDXError:=LinearErrorArray);

fbIDXResetError(Execute:= LinearresetAxis,Axis:=LinearMotor.Axis); 
fbLinearBrakePressureScale(
	fIn:= LinearBrakeRawData,
	stParams:= LinearBrakeScaleParams,
	fOut=> LinearBrakePressure);

// Estop is active low 
IF NOT Estop THEN  //Estop check
	IdxEnable:=FALSE;
	EveEnable:=FALSE;	
END_IF

IF LinearBrakePressure<LinearBrakeMinOperatingPressure THEN
	LinearBrakeUnderPressure := TRUE;
ELSE 
	LinearBrakeUnderPressure := FALSE;
END_IF
BrakeUnderPressureTimer(IN:= LinearBrakeUnderPressure);

IF BrakeUnderPressureTimer.Q THEN
	IdxEnable:=FALSE;
END_IF
LinearBrake := IdxEnable;// brake disabled when motor online 
LinearMotor.Estop(Execute:= NOT Estop );



LinearMotor.Enable(Execute:= IdxEnable);


LinearMotor.Reset(Execute := LinearResetNC);

HomingBusy:= LinearMotor.Home(Execute:= LinearHome,HomePositionIn:= 510.0);

LinearMotor.GetCurrentPosition(PositionOut=> LinearPosition);

LinearMotor.GetStatus(AxisOut:= LinearStatus);

LinearMotor.MoveTo(
	Execute:= LinearMove,
	TargetPositionIn:= LinearCommandedPosition,
	VelocityIn := LinearMovementSpeed,
	eStateOut=> LinearMoveState);

IF LinearStatus.Error  THEN // put in error state if axis is in error 
	LinearAxisState:=LinearStates.Error;
ELSIF NOT IdxEnable THEN // if not in error or enabled 
		LinearAxisState:=LinearStates.Initialising;
		
END_IF

CASE(LinearAxisState) OF 
	
	LinearStates.Initialising:
		
		IF  LinearStatus.Operational AND LinearStatus.Homed THEN
			LinearAxisState:=LinearStates.Idle;	
		ELSIF LinearStatus.Operational THEN 
			LinearAxisState:=LinearStates.Start_Homing;
		END_IF
	
	LinearStates.Start_Homing:
		LinearHome:=TRUE;
		LinearAxisState:=LinearStates.Homing;

	LinearStates.Homing:
		IF LinearStatus.Homed AND NOT HomingBusy THEN
			LinearAxisState:=LinearStates.Idle;
			//LinearCommandedPosition:=MovementPositions.linearpos.deployed;
		END_IF
	
	LinearStates.Idle:
		IF ABS(LinearCommandedPosition-LinearPosition)>0.01  THEN
			LinearAxisState:=LinearStates.Start_Move;
		ELSE
			LinearMove:=FALSE;
		END_IF
		
	LinearStates.Start_Move:
			LinearMove:=TRUE;
			LinearAxisState:=LinearStates.Moving; 
			
	LinearStates.Moving:
		IF LinearMoveState = e_MCState.Done THEN
			LinearAxisState:=LinearStates.Idle; 
			
		ELSIF LinearMoveState = e_MCState.Error THEN
			LinearAxisState:=LinearStates.Error; 
		END_IF
	
	LinearStates.Error:
	IdxEnable:=FALSE;
		IF LinearErrorACK THEN
			LinearResetAxis:=TRUE;
			LinearResetNC := TRUE;
			LinearErrorACK:=FALSE;
			LinearAxisState:= LinearStates.Initialising;
		END_IF

	
END_CASE


RotationStatus:= fbEverest.Status();
fbEverest.Enable(EnableMotor:= EveEnable);
fbEverest.Reset(resetAxis:=RotationresetAxis);
fbEverest.Home(Execute:=RotationHome);
RotationPosition := fbEverest.Position();
fbEverest.MoveTo(Position:=RotationCommandedPosition,Velocity:=RotationMovementSpeed,Execute:=RotationMove);

IF RotationStatus.Error THEN
	RotationAxisState:=RotationStates.Error;
ELSIF NOT EveEnable THEN
		RotationAxisState:=RotationStates.Initialising;
END_IF


CASE(RotationAxisState) OF 
	
	RotationStates.Initialising:
		
		IF  RotationStatus.Operational THEN
			RotationAxisState:=RotationStates.Start_Homing;
		END_IF
	
	RotationStates.Start_Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=RotationStates.Idle;
		ELSE
			RotationHome:=TRUE;
			RotationAxisState:=RotationStates.Homing;
		END_IF
	

	RotationStates.Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=RotationStates.Idle;
	END_IF
			
		
	
	RotationStates.Idle:
		IF ABS(RotationCommandedPosition-fbEverest.Axis.NcToPlc.SetPos)>0.01 THEN
			RotationAxisState:=RotationStates.Moving;
			RotationMove:=TRUE;
		ELSE 
			RotationMove:=FALSE;
		END_IF
		
			
	RotationStates.Moving:
		IF NOT RotationStatus.HasJob THEN
			RotationAxisState:=	RotationStates.Idle;
		END_IF
	
	RotationStates.Error:
		IF RotationErrorACK THEN
			RotationresetAxis:=TRUE;
			RotationErrorACK:=FALSE;
		END_IF
		
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="5178" Count="0" />
      <LineId Id="5176" Count="0" />
      <LineId Id="4283" Count="35" />
      <LineId Id="4738" Count="0" />
      <LineId Id="4319" Count="6" />
      <LineId Id="4559" Count="0" />
      <LineId Id="4326" Count="34" />
      <LineId Id="4366" Count="6" />
      <LineId Id="4752" Count="1" />
      <LineId Id="4374" Count="0" />
      <LineId Id="4778" Count="0" />
      <LineId Id="5462" Count="1" />
      <LineId Id="5465" Count="0" />
      <LineId Id="4376" Count="1" />
      <LineId Id="5901" Count="0" />
      <LineId Id="5900" Count="0" />
      <LineId Id="5902" Count="0" />
      <LineId Id="4395" Count="2" />
      <LineId Id="4399" Count="2" />
      <LineId Id="5910" Count="0" />
      <LineId Id="5897" Count="0" />
      <LineId Id="5904" Count="2" />
      <LineId Id="5899" Count="0" />
      <LineId Id="5907" Count="0" />
      <LineId Id="5913" Count="0" />
      <LineId Id="5746" Count="0" />
      <LineId Id="5908" Count="1" />
      <LineId Id="5745" Count="0" />
      <LineId Id="4402" Count="4" />
      <LineId Id="5321" Count="0" />
      <LineId Id="4407" Count="3" />
      <LineId Id="4412" Count="3" />
      <LineId Id="4558" Count="0" />
      <LineId Id="4553" Count="4" />
      <LineId Id="4422" Count="35" />
      <LineId Id="4459" Count="0" />
      <LineId Id="4552" Count="0" />
      <LineId Id="5605" Count="0" />
      <LineId Id="4472" Count="0" />
      <LineId Id="4478" Count="1" />
      <LineId Id="5602" Count="0" />
      <LineId Id="5600" Count="1" />
      <LineId Id="4480" Count="2" />
      <LineId Id="5608" Count="0" />
      <LineId Id="4483" Count="1" />
      <LineId Id="5607" Count="0" />
      <LineId Id="4485" Count="66" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>