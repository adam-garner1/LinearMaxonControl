<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{4e8483c1-ccbb-4128-b543-7a53eb2e77a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	fbTest : TestMode();
		
	fbIDX70 :IDXMotor(ResetBit:=idxCTRL1);
	fbEverest :EverestMC();
	{attribute 'OPC.UA.DA' := '1'}
	IdxEnable:BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	EveEnable:BOOL;
	idxInput AT%I*	:BYTE;
	idxCTRL1 AT%I*:USINT;
//	Distance: LREAL;
	//JogStart: BOOL;
	//StartMove:BOOL;
	//StartEveMove:BOOL;
	//fbMessage : FB_TcMessage;
	//Homed:BOOL;
	//Ready:BOOL;
	//Homing :BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	Estop: BOOL;
	RotationHome :BOOL:=FALSE;
	LinearresetAxis :BOOL:=FALSE;
	RotationresetAxis :BOOL:=FALSE;
	//TestingMode: BOOL := FALSE;
	//StartTestMode:BOOL;
	//EndTest :bool := False;
	ResetTimer: TON :=(PT:=T#5S,IN:=FALSE);


	{attribute 'OPC.UA.DA' := '1'}
	LinearAxisState: LinearStates; (*~ (OPC:1:linear axis status ) *)
	{attribute 'OPC.UA.DA' := '1'}
	LinearCommandedPosition:LREAL;
	LinearMove:BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	LinearMovementSpeed:LREAL:=50;
	LinearStatus :ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
{attribute 'OPC.UA.DA.Description' := 'Position of Linear Stage'}
	LinearPosition  : LREAL;
	linear_reset :TON:= (PT:=T#1S,IN:=FALSE);
	Rotation_reset :TON:= (PT:=T#1S,IN:=FALSE);
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	linPositions1 :LinearPositions;
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	linPositions2 :LinearPositions;
	
	

	
	
	RotationStatus: ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	RotationPosition: LREAL;
	LinearHome: BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	RotationAxisState: RotationStates;
	{attribute 'OPC.UA.DA' := '1'}
	RotationCommandedPosition: LREAL:=50000;
	{attribute 'OPC.UA.DA' := '1'}
	RotationMovementSpeed: LREAL:=10000;
	RotationMove: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Linear.ReadStatus();

fbIDX70();// error checking
fbEverest();



//autoreset motor 
//IF fbIDX70.MotorError =33154 AND ResetTimer.Q THEN
//	ResetTimer(IN :=FALSE); 
//	resetAxis:=TRUE;	
//END_IF
//ResetTimer(IN:=TRUE);




Estop :=  NOT idxinput.0; 
IF Estop THEN  //Estop check
	fbIDX70.Estop();// needs implementing  as event and quick stop function
	IdxEnable:=FALSE;
	EveEnable:=FALSE;	
END_IF

LinearStatus:= fbIDX70.Status();
fbIDX70.Enable(EnableMotor:= IdxEnable);
fbIDX70.Reset(resetAxis:=LinearresetAxis);
fbIDX70.Home(Execute:=LinearHome);
LinearPosition := fbIDX70.Position();

IF LinearStatus.Error THEN
	LinearAxisState:=linearstates.Error;
ELSIF NOT IdxEnable THEN
		LinearAxisState:=linearstates.Initialising;

END_IF

CASE(LinearAxisState) OF 
	
	LinearStates.Initialising:
		
		IF  LinearStatus.Operational THEN
			LinearAxisState:=LinearStates.Start_Homing;
		END_IF
	
	LinearStates.Start_Homing:
		IF LinearStatus.Homed THEN
			LinearAxisState:=Linearstates.Idle;
		ELSE
			LinearHome:=TRUE;
			LinearAxisState:=LinearStates.Homing;
		END_IF

	LinearStates.Homing:
		IF LinearStatus.Homed THEN
			LinearAxisState:=LinearStates.Idle;
			LinearCommandedPosition:=MovementPositions.linearpos.deployed;
		END_IF
	
	LinearStates.Idle:
		IF ABS(LinearCommandedPosition-LinearPosition)>0.1 THEN
			LinearAxisState:=LinearStates.Moving;
			LinearMove:=TRUE;
		END_IF
		fbIDX70.MoveTo(Position:=LinearCommandedPosition,Velocity:=LinearMovementSpeed,Execute:=LinearMove);
			
	Linearstates.Moving:
		IF NOT LinearStatus.HasJob THEN
			LinearAxisState:=LinearStates.Idle; 
		END_IF
	
	Linearstates.Error:
		IF linear_reset.Q THEN
			LinearresetAxis:=TRUE;
			linear_reset.IN:=FALSE;
		END_IF
		Linear_reset(IN :=TRUE);
		IF LinearStatus.Error THEN
			LinearAxisState:= LinearStates.initialising;
		END_IF
	
END_CASE


RotationStatus:= fbEverest.Status();
fbEverest.Enable(EnableMotor:= EveEnable);
fbEverest.Reset(resetAxis:=RotationresetAxis);
fbEverest.Home(Execute:=RotationHome);
RotationPosition := fbEverest.Position();

IF RotationStatus.Error THEN
	RotationAxisState:=Rotationstates.Error;
ELSIF NOT EveEnable THEN
		RotationAxisState:=Rotationstates.Initialising;
END_IF


CASE(RotationAxisState) OF 
	
	RotationStates.Initialising:
		
		IF  RotationStatus.Operational THEN
			RotationAxisState:=RotationStates.Idle;
		END_IF
	
	//RotationStates.Start_Homing:
	//RotationStates.Homing:
		
	
	RotationStates.Idle:
		IF ABS(RotationCommandedPosition-fbEverest.Axis.NcToPlc.SetPos)>0.1 THEN
			RotationAxisState:=RotationStates.Moving;
			RotationMove:=TRUE;
		END_IF
		fbEverest.MoveTo(Position:=RotationCommandedPosition,Velocity:=RotationMovementSpeed,Execute:=RotationMove);
			
	RotationStates.Moving:
		IF NOT RotationStatus.HasJob THEN
			RotationAxisState:=	RotationStates.Idle;
		END_IF
	
	RotationStates.Error:
		IF Rotation_reset.Q THEN
			RotationresetAxis:=TRUE;
			Rotation_reset.IN:=FALSE;
		END_IF
		Rotation_reset(IN :=TRUE);
		IF RotationStatus.Error THEN
			RotationAxisState:= RotationStates.initialising;
		END_IF
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="2" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="1417" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="726" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="1171" Count="0" />
      <LineId Id="791" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1258" Count="0" />
      <LineId Id="1178" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1402" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1179" Count="1" />
      <LineId Id="1259" Count="2" />
      <LineId Id="1181" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1157" Count="2" />
      <LineId Id="1114" Count="1" />
      <LineId Id="1185" Count="1" />
      <LineId Id="1188" Count="2" />
      <LineId Id="1187" Count="0" />
      <LineId Id="1134" Count="0" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1136" Count="1" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1120" Count="1" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1122" Count="0" />
      <LineId Id="1125" Count="0" />
      <LineId Id="1161" Count="0" />
      <LineId Id="1154" Count="1" />
      <LineId Id="1127" Count="1" />
      <LineId Id="1167" Count="1" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1164" Count="0" />
      <LineId Id="1182" Count="2" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1108" Count="0" />
      <LineId Id="1174" Count="0" />
      <LineId Id="1418" Count="4" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1428" Count="4" />
      <LineId Id="1427" Count="0" />
      <LineId Id="1435" Count="10" />
      <LineId Id="1453" Count="0" />
      <LineId Id="1457" Count="23" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>