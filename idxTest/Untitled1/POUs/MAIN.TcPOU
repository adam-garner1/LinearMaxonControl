<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{4e8483c1-ccbb-4128-b543-7a53eb2e77a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	Linear: AXIS_REF;
	fbTest : TestMode();
	fbMqttClient : FB_IotMqttClient;
		
	fbIDX70 :IDXMotor(ResetBit:=idxCTRL1, MQTTevent:= fbMqttClient);
	fbEverest :EverestMC();
	IdxEnable:BOOL;
	EveEnable:BOOL;
	idxState AT%I* :WORD;
	idxInput AT%I*	:BYTE;
	idxCTRL1 AT%I*:USINT;
	MovementTarget:LREAL;
	MovementVelocity:LREAL:=50;
	Distance: LREAL;
	JogStart: BOOL;
	StartMove:BOOL;
	StartEveMove:BOOL;
	//fbMessage : FB_TcMessage;
	Homed:BOOL;
	Ready:BOOL;
	Homing :BOOL;
	Estop: BOOL;
	Home :BOOL:=FALSE;
	resetAxis :BOOL:=FALSE;
	TestingMode: BOOL := FALSE;
	StartTestMode:BOOL;
	EndTest :bool := False;
	ResetTimer: TON :=(PT:=T#5S,IN:=FALSE);

	 
	SetParameter : BOOL :=TRUE;
	mqttConnect : BOOL :=TRUE;
	
	(*publish settings*)
	TopicPub   : STRING(255) := 'PLC/Telemetry';
    PayloadPub : STRING(255);
	MQTTi :UDINT;
	

	 (* received message *)
    Subscribed    : BOOL;
    TopicSub      : STRING(255) := 'PLC';
    {attribute 'TcEncoding':='UTF-8'}
    sTopicRcv      : STRING(255);
    {attribute 'TcEncoding':='UTF-8'}
    sPayloadRcv    : STRING(255);
    fbMessageQueue : FB_IotMqttMessageQueue;
    fbMessage      : FB_IotMqttMessage;
	
	fbMQTTtimer : TON :=(PT:=T#1S);
	

	AxisStatus: ST_AxisStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Linear.ReadStatus();

fbIDX70();// error checking 
Ready:=fbIDX70.Enable(EnableMotor:= IdxEnable);
fbEverest.Enable(EnableMotor:= EveEnable);
fbIDX70.Reset(resetAxis:=resetAxis);
fbEverest.Reset(resetAxis:=resetAxis);
fbIDX70.MoveTo(Position:=MovementTarget,Velocity:=MovementVelocity,Execute:=StartMove);
fbIDX70.MoveRelative(Distance:=Distance,Velocity:=MovementVelocity,Execute:=JogStart);
fbEverest.MoveTo(Position:=MovementTarget,Velocity:=MovementVelocity,Execute:=StartEveMove);


//autoreset motor 
IF fbIDX70.MotorError =33154 AND ResetTimer.Q THEN
	ResetTimer(IN :=FALSE);
	resetAxis:=TRUE;	
END_IF
ResetTimer(IN:=TRUE);


// Home Axis
Homing := fbIDX70.Home(Execute:=Home);
Homed :=fbIDX70.Homed();

Estop :=  NOT idxinput.0; 

IF Estop THEN  //Estop check
	fbIDX70.Estop();// needs implementing  as event and quick stop function
	IdxEnable:=FALSE;
	EveEnable:=FALSE;	
END_IF
fbTest(TestingActive => TestingMode);
fbTest.StartTest(
			PositionA:=400,
			PositionB:=250,
			Velocity:=100,
			Axis:=fbIDX70
			,Dwell :=T#5S,
			Execute:=StartTestMode);
fbTest.EndTest(END := EndTest);			


IF SetParameter THEN
    SetParameter               := FALSE;
    fbMqttClient.sHostName      := '150.204.240.229';
    fbMqttClient.nHostPort      := 1883;
//  fbMqttClient.sClientId      := 'MyTcMqttClient'; 
    fbMqttClient.sTopicPrefix   := ''; 
//  fbMqttClient.nKeepAlive     := 60; 
	fbMqttClient.sUserName      := 'NRT';
	fbMqttClient.sUserPassword  := 'NRTtest'; 
//  fbMqttClient.stWill         := ; 
//  fbMqttClient.stTLS          := ;
    fbMqttClient.ipMessageQueue := fbMessageQueue;
END_IF

fbMqttClient.Execute(mqttConnect);

IF fbMqttClient.bConnected THEN
    IF NOT Subscribed THEN
        Subscribed := fbMqttClient.Subscribe(sTopic:=TopicSub, eQoS:=TcIotMqttQos.AtMostOnceDelivery);
    END_IF
    fbMQTTTimer(IN:=TRUE);
    IF fbMQTTTimer.Q THEN // publish new payload every second
        fbMQTTTimer(IN:=FALSE);
        MQTTi := MQTTi + 1;
        PayloadPub := CONCAT('test ', TO_STRING(fbIDX70.Position()));
        fbMqttClient.Publish(    sTopic:= TopicPub, 
                                pPayload:= ADR(PayloadPub), nPayloadSize:= LEN2(ADR(PayloadPub))+1, 
                                eQoS:= TcIotMqttQos.AtMostOnceDelivery, bRetain:= FALSE, bQueue:= FALSE );
    END_IF
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="2" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="620" Count="0" />
      <LineId Id="860" Count="0" />
      <LineId Id="714" Count="0" />
      <LineId Id="1015" Count="0" />
      <LineId Id="793" Count="0" />
      <LineId Id="853" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="726" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="790" Count="1" />
      <LineId Id="717" Count="3" />
      <LineId Id="288" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="347" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="929" Count="7" />
      <LineId Id="196" Count="0" />
      <LineId Id="1017" Count="0" />
      <LineId Id="1021" Count="13" />
      <LineId Id="1018" Count="1" />
      <LineId Id="1035" Count="12" />
      <LineId Id="1020" Count="0" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>