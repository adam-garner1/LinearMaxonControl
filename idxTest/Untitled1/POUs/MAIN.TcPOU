<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{4e8483c1-ccbb-4128-b543-7a53eb2e77a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR

	
	
	SafetySystem : FB_SafetySystemMonitor;
	AGSafeInputs : FB_EL1918Monitor;
	AGSafeOutputs : FB_EL2904Monitor;
	AGEstop: FB_SafetyEstopMonitor;
	OffMountEstop :FB_SafetyEstopMonitor;

	
	
	

	


	fbIDX70 :IDXMotor(ResetBit:=idxCTRL1);
	fbEverest :EverestMC();
	LinearEncoder: AXIS_REF;
	Force: AXIS_REF;
	EstopInput AT%I*	:Bool;	
	
	//PowerStatus: AGPowerStatus;
	GetUPSStatus : FB_GetUPSStatus;
	ReadUPSStatus:BOOL := TRUE;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	fbAGPowerStatus : fbAGPowerStatus;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	
	

	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	UPSStatus: ST_UPSStatus;
	UPSStatusValid:BOOL;
	
	Instruments :ARRAY[0..4] OF instrument ;
	{attribute 'OPC.UA.DA' := '1'}
	DemoMode: BOOL;
	CurrentInstrument:INT;
	Change_Inst :TON:= (PT:=T#10S,IN:=FALSE);
	CurrentInstName:STRING;
	
	
	BacklashComp : MC_BacklashCompensation;
	BackEn :BOOL;
	Backlashmm:LREAL;
	BacklashDir:BOOL;
	
	ForceAvg : FB_CTRL_MOVING_AVERAGE;
	ForceAvgArray: ARRAY[0..100] OF LREAL;
	ForceAvgParas : ST_CTRL_MOVING_AVERAGE_PARAMS := (
tCtrlCycleTime:= T#100MS,
tTaskCycleTime:= T#10MS,
nSamplesToFilter:=100,
pWorkArray_ADR:= ADR(ForceAvgArray),
nWorkArray_SIZEOF:= 800);


	
	{attribute 'OPC.UA.DA' := '1'}
	IdxEnable:BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	EveEnable:BOOL;
	idxInput AT%I*	:BYTE;
	idxCTRL1 AT%I*:USINT;
//	Distance: LREAL;
	//JogStart: BOOL;
	//StartMove:BOOL;
	//StartEveMove:BOOL;
	//fbMessage : FB_TcMessage;
	//Homed:BOOL;
	//Ready:BOOL;
	//Homing :BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	Estop: BOOL;
	RotationHome :BOOL:=FALSE;
	LinearresetAxis :BOOL:=FALSE;
	RotationresetAxis :BOOL:=FALSE;
	RoboticMode:BOOL;
	RoboticModePosA :REAL :=100;
	RoboticModePosB :REAL :=400;
	ResetTimer: TON :=(PT:=T#5S,IN:=FALSE);
	
LinearEncHome:BOOL;
LinearHomePosition:LREAL;
FBLinearEncHome :MC_Home;

	{attribute 'OPC.UA.DA' := '1'}
	Test_Active:BOOL;
	
	{attribute 'OPC.UA.DA' := '1'}
	LinearAxisState: LinearStates; (*~ (OPC:1:linear axis status ) *)
	{attribute 'OPC.UA.DA' := '1'}
	LinearCommandedPosition:LREAL;
	LinearMovementTarget:LREAL;
	LinearMove:BOOL;
	LinearMoveState: e_MCState;
	{attribute 'OPC.UA.DA' := '1'}
	LinearErrorACK:BOOL:=FALSE;
	{attribute 'OPC.UA.DA' := '1'}
	LinearMovementSpeed:LREAL:=50;
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	LinearStatus :ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
{attribute 'OPC.UA.DA.Description' := 'Position of Linear Stage'}
	LinearPosition  : LREAL;
	linear_reset :TON:= (PT:=T#1S,IN:=FALSE);
	Rotation_reset :TON:= (PT:=T#1S,IN:=FALSE);
	
	{attribute 'OPC.UA.DA' := '0'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	linPositions1 :LinearPositions;
		{attribute 'OPC.UA.DA' := '0'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	linPositions2 :LinearPositions;
	
	

	
	
	RotationStatus: ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	RotationPosition: LREAL;
	LinearHome: BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	RotationAxisState: RotationStates;
	{attribute 'OPC.UA.DA' := '1'}
	RotationCommandedPosition: LREAL:=60;
	{attribute 'OPC.UA.DA' := '1'}
	RotationMovementSpeed: LREAL:=20;
	RotationMove: BOOL;
	homeoutput: BOOL;
	
	fbCoERead         : FB_CoERead;
	NetId             : T_AmsNetID := ''; 
   Index          : WORD:= 16#10F3;(*CoE object index*)
   SubIndex       : BYTE:=16#01;(*CoE sub index*)
   pDstBuf        : PVOID;(*Contains the address of the buffer for the received data*)
   BufLen         : UDINT;(*Contains the max. number of bytes to be received*)
   Execute        : BOOL;(*Function block execution is triggered by a rising edge at this input.*)
   Timeout        : TIME := DEFAULT_ADS_TIMEOUT;(*States the time before the function is cancelled.*)
   CompleteAccess : BOOL:= FALSE;(*Function block reads the complete object with all sub index*)
   COEData:INT;
COEString:ARRAY [0..100] of BYTE;
	COEError: BOOL;
	
	MotorPowerRaw :INT;
	AGPowerRaw:INT;
	MotorPowerV :REAL;
	AGPowerV:REAL;
	
EtherCatStates: fbStateMachineManager;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SafetySystem();
AGSafeInputs();
AGSafeOutputs();
AGEstop();
OffMountEstop();






//Linear.ReadStatus();
LinearEncoder.ReadStatus();
Force.ReadStatus();
fbIDX70();// error checking
fbEverest();
fbAGPowerStatus();
EtherCatStates();


// AND IdxEnable AND EveEnable
IF DemoMode  AND Change_Inst.Q  THEN
	CurrentInstrument:= (CurrentInstrument+1) MOD 4;
	Change_Inst(IN :=FALSE);
	LinearCommandedPosition:= (CurrentInstrument*75);
	RotationCommandedPosition:= Instruments[CurrentInstrument].Rotation;
	CurrentInstName := Instruments[CurrentInstrument].Name;
ELSIF  NOT DemoMode THEN
	CurrentInstName :=' None Selected ';
ELSE 
	Change_Inst(IN :=TRUE);

	
END_IF



ForceAvg(
 Fin:= Force.NcToPlc.ActPos,
stParams:= ForceAvgParas,
eMode:= E_CTRL_MODE.eCTRL_MODE_ACTIVE);
	

	FBLinearENCHome(
	Axis:=LinearEncoder,
	Execute:=LinearEncHome,
	Position:=LinearHomePosition,
	HomingMode:=MC_Direct);
	

BacklashComp(
	Axis:= FbIDX70.Axis,
	Enable := BackEn,
	Backlash :=Backlashmm,
	CompensationInPositiveDirection:=BacklashDir,
	Ramp := 10,DisableMode:=1);
	
GetUPSStatus(sNetId:='',
	Nport:=0,  (* 0 = Windows UPS service / Windows Battery driver  *)
	bEnable:= ReadUPSStatus,
	bValid=>UPSStatusValid,
	stStatus=> UPSStatus);
	

//autoreset motor 
//IF fbIDX70.MotorError =33154 AND ResetTimer.Q THEN
//	ResetTimer(IN :=FALSE); 
//	resetAxis:=TRUE;	
//END_IF
//ResetTimer(IN:=TRUE);


fbCoERead(
    NetId          := NetId, 
    Index          := Index, 
    SubIndex       := SubIndex, 
    pDstBuf        := ADR(COEString), 
    BufLen         := SIZEOF(COEString), 
    Execute        := Execute, 
    Timeout        := Timeout, 
    CompleteAccess := CompleteAccess, 
    Axis           := fbIDX70.Axis
);

IF NOT fbCoERead.Busy THEN
    COEError        :=fbCoERead.Error;
    Execute      := FALSE;
    fbCoERead(Execute := Execute, Axis := fbIDX70.Axis);
END_IF

Estop :=  NOT EstopInput; 
IF Estop THEN  //Estop check
	fbIDX70.Estop();// needs implementing  as event and quick stop function
	IdxEnable:=FALSE;
	EveEnable:=FALSE;	
END_IF


fbIDX70.Enable(EnableMotor:= IdxEnable);
fbIDX70.Reset(resetAxis:=LinearresetAxis);
homeoutput := fbIDX70.Home(Execute:=LinearHome);
//fbIDX70.MoveTo(Position:=LinearCommandedPosition,Velocity:=LinearMovementSpeed,Execute:=LinearMove);
LinearPosition := fbIDX70.Position();
LinearStatus:= fbIDX70.Status();
fbIDX70.MoveTo(
					Position:=LinearCommandedPosition,
					Velocity:=LinearMovementSpeed,
					Execute:=LinearMove,
					State=> LinearMoveState,
Target=> LinearMovementTarget);

IF LinearStatus.Error THEN
	LinearAxisState:=linearstates.Error;
ELSIF NOT IdxEnable OR LinearAxisState = linearstates.Error THEN
		LinearAxisState:=linearstates.Initialising;
		
END_IF

CASE(LinearAxisState) OF 
	
	LinearStates.Initialising:
		
		IF  LinearStatus.Operational AND LinearStatus.Homed THEN
			LinearAxisState:=Linearstates.Idle;	
		ELSIF LinearStatus.Operational THEN 
			LinearAxisState:=LinearStates.Start_Homing;
		END_IF
	
	LinearStates.Start_Homing:
		LinearHome:=TRUE;
		LinearAxisState:=LinearStates.Homing;

	LinearStates.Homing:
		IF LinearStatus.Homed AND NOT homeoutput THEN
			LinearAxisState:=LinearStates.Idle;
			//LinearCommandedPosition:=MovementPositions.linearpos.deployed;
		END_IF
	
	LinearStates.Idle:
		IF ABS(LinearCommandedPosition-LinearPosition)>0.005  THEN
			LinearAxisState:=LinearStates.Start_Move;
		ELSE
			//LinearMove:=FALSE;
		END_IF
		
	LinearStates.Start_Move:
			IF (LinearMoveState = e_MCState.idle) THEN
			LinearMove:=TRUE;
			
		ELSIF  LinearMoveState = e_MCState.Active THEN
			LinearAxisState := LinearStates.Moving;
		END_IF;
		
		IF NOT (LinearMovementTarget = LinearCommandedPosition) AND NOT (LinearMoveState = e_MCState.Busy) THEN 
			// new position sent  mid command 
			// doesnt fully work as second function block whould be needed for a blended move 
			// could implement a stop function here and restart needs thinking about 
			LinearMove:=TRUE;
		END_IF
		
	Linearstates.Moving:
		IF NOT (LinearMovementTarget = LinearCommandedPosition) THEN 
			// new position sent 
			LinearAxisState:=LinearStates.Start_Move;
		END_IF
		
		IF LinearMoveState = e_MCState.Done THEN
			LinearAxisState:=LinearStates.Idle; 
		END_IF
	
	Linearstates.Error:
		IF LinearErrorACK THEN
			LinearresetAxis:=TRUE;
			LinearErrorACK:=FALSE;
			LinearAxisState:= LinearStates.initialising;
		END_IF

	
END_CASE


RotationStatus:= fbEverest.Status();
fbEverest.Enable(EnableMotor:= EveEnable);
fbEverest.Reset(resetAxis:=RotationresetAxis);
fbEverest.Home(Execute:=RotationHome);
RotationPosition := fbEverest.Position();
fbEverest.MoveTo(Position:=RotationCommandedPosition,Velocity:=RotationMovementSpeed,Execute:=RotationMove);

IF RotationStatus.Error THEN
	RotationAxisState:=Rotationstates.Error;
ELSIF NOT EveEnable THEN
		RotationAxisState:=Rotationstates.Initialising;
END_IF


CASE(RotationAxisState) OF 
	
	RotationStates.Initialising:
		
		IF  RotationStatus.Operational THEN
			RotationAxisState:=RotationStates.Start_Homing;
		END_IF
	
	RotationStates.Start_Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=Rotationstates.Idle;
		ELSE
			RotationHome:=TRUE;
			RotationAxisState:=RotationStates.Homing;
		END_IF
	

	RotationStates.Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=RotationStates.Idle;
	END_IF
			
		
	
	RotationStates.Idle:
		IF ABS(RotationCommandedPosition-fbEverest.Axis.NcToPlc.SetPos)>0.01 THEN
			RotationAxisState:=RotationStates.Moving;
			RotationMove:=TRUE;
		ELSE 
			RotationMove:=FALSE;
		END_IF
		
			
	RotationStates.Moving:
		IF NOT RotationStatus.HasJob THEN
			RotationAxisState:=	RotationStates.Idle;
		END_IF
	
	RotationStates.Error:
		IF Rotation_reset.Q THEN
			RotationresetAxis:=TRUE;
			Rotation_reset.IN:=FALSE;
		END_IF
		Rotation_reset(IN :=TRUE);
		IF RotationStatus.Error THEN
			RotationAxisState:= RotationStates.initialising;
		END_IF
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3495" Count="0" />
      <LineId Id="3502" Count="1" />
      <LineId Id="3496" Count="0" />
      <LineId Id="3675" Count="0" />
      <LineId Id="3504" Count="0" />
      <LineId Id="3497" Count="4" />
      <LineId Id="2" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="1799" Count="0" />
      <LineId Id="694" Count="0" />
      <LineId Id="1417" Count="0" />
      <LineId Id="2634" Count="0" />
      <LineId Id="3154" Count="0" />
      <LineId Id="3000" Count="0" />
      <LineId Id="2995" Count="0" />
      <LineId Id="2084" Count="0" />
      <LineId Id="2083" Count="0" />
      <LineId Id="2089" Count="0" />
      <LineId Id="2092" Count="0" />
      <LineId Id="2095" Count="1" />
      <LineId Id="2098" Count="0" />
      <LineId Id="2101" Count="1" />
      <LineId Id="2093" Count="1" />
      <LineId Id="2100" Count="0" />
      <LineId Id="2099" Count="0" />
      <LineId Id="2627" Count="1" />
      <LineId Id="2086" Count="0" />
      <LineId Id="1972" Count="1" />
      <LineId Id="1976" Count="0" />
      <LineId Id="1986" Count="1" />
      <LineId Id="1977" Count="0" />
      <LineId Id="1975" Count="0" />
      <LineId Id="2324" Count="4" />
      <LineId Id="1974" Count="0" />
      <LineId Id="944" Count="0" />
      <LineId Id="939" Count="0" />
      <LineId Id="1884" Count="4" />
      <LineId Id="1883" Count="0" />
      <LineId Id="1882" Count="0" />
      <LineId Id="2205" Count="0" />
      <LineId Id="2207" Count="0" />
      <LineId Id="2206" Count="0" />
      <LineId Id="2211" Count="0" />
      <LineId Id="2204" Count="0" />
      <LineId Id="941" Count="0" />
      <LineId Id="721" Count="0" />
      <LineId Id="723" Count="0" />
      <LineId Id="788" Count="0" />
      <LineId Id="726" Count="0" />
      <LineId Id="725" Count="0" />
      <LineId Id="790" Count="0" />
      <LineId Id="2441" Count="0" />
      <LineId Id="1172" Count="0" />
      <LineId Id="2469" Count="9" />
      <LineId Id="1171" Count="0" />
      <LineId Id="2480" Count="2" />
      <LineId Id="2485" Count="1" />
      <LineId Id="791" Count="0" />
      <LineId Id="718" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="696" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="1014" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="1105" Count="0" />
      <LineId Id="1162" Count="0" />
      <LineId Id="1258" Count="0" />
      <LineId Id="1178" Count="0" />
      <LineId Id="1329" Count="0" />
      <LineId Id="1552" Count="0" />
      <LineId Id="1402" Count="0" />
      <LineId Id="1646" Count="0" />
      <LineId Id="2664" Count="3" />
      <LineId Id="2663" Count="0" />
      <LineId Id="2842" Count="0" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1179" Count="1" />
      <LineId Id="1259" Count="1" />
      <LineId Id="1723" Count="0" />
      <LineId Id="1720" Count="0" />
      <LineId Id="1106" Count="0" />
      <LineId Id="1104" Count="0" />
      <LineId Id="1110" Count="0" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1130" Count="0" />
      <LineId Id="1157" Count="0" />
      <LineId Id="1642" Count="1" />
      <LineId Id="1158" Count="1" />
      <LineId Id="1114" Count="1" />
      <LineId Id="1189" Count="1" />
      <LineId Id="1134" Count="0" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1136" Count="1" />
      <LineId Id="1191" Count="0" />
      <LineId Id="1138" Count="0" />
      <LineId Id="1120" Count="1" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1146" Count="0" />
      <LineId Id="1554" Count="1" />
      <LineId Id="1147" Count="0" />
      <LineId Id="1404" Count="0" />
      <LineId Id="1122" Count="0" />
      <LineId Id="2677" Count="4" />
      <LineId Id="2676" Count="0" />
      <LineId Id="2836" Count="0" />
      <LineId Id="2838" Count="1" />
      <LineId Id="2843" Count="1" />
      <LineId Id="2840" Count="0" />
      <LineId Id="2837" Count="0" />
      <LineId Id="2640" Count="0" />
      <LineId Id="1125" Count="0" />
      <LineId Id="2831" Count="1" />
      <LineId Id="2834" Count="0" />
      <LineId Id="2833" Count="0" />
      <LineId Id="2835" Count="0" />
      <LineId Id="1161" Count="0" />
      <LineId Id="1154" Count="1" />
      <LineId Id="1127" Count="1" />
      <LineId Id="1167" Count="1" />
      <LineId Id="1175" Count="0" />
      <LineId Id="1719" Count="0" />
      <LineId Id="1169" Count="0" />
      <LineId Id="1184" Count="0" />
      <LineId Id="1113" Count="0" />
      <LineId Id="1108" Count="0" />
      <LineId Id="1551" Count="0" />
      <LineId Id="1418" Count="4" />
      <LineId Id="1173" Count="0" />
      <LineId Id="1559" Count="0" />
      <LineId Id="1428" Count="4" />
      <LineId Id="1427" Count="0" />
      <LineId Id="1435" Count="10" />
      <LineId Id="1563" Count="4" />
      <LineId Id="1562" Count="0" />
      <LineId Id="1453" Count="0" />
      <LineId Id="1561" Count="0" />
      <LineId Id="1560" Count="0" />
      <LineId Id="1568" Count="3" />
      <LineId Id="1457" Count="5" />
      <LineId Id="1556" Count="1" />
      <LineId Id="1463" Count="17" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>