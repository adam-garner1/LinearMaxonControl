<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{4e8483c1-ccbb-4128-b543-7a53eb2e77a5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT 
	SafetyModuleArraySize :UINT:=1;
	EstopArraySize :UINT := 1;
END_VAR
VAR
	
	LinearMotor :FB_Motion(AxisNameIn := 'LinearMotor');
	

	SafetySystem : FB_SafetySystemMonitor;
	AGSafeInputs : FB_EL1918Monitor(Namein:='AGSafeInputs',ElectricalRefin:='K7',Addressin:=1008);
	AGSafeOutputs : FB_EL2904Monitor(NameIn:='AGSafeOutputs',ElectricalRefIn:='K8',AddressIn:=1010);
	AGEstop: FB_SafetyEstopMonitor(NameIn:='A&G Box');

	OffMountEstop :FB_SafetyEstopMonitor(NameIn:='Off Mount');

	fbDigitalInputMonitor : FB_EthercatModuleMonitor(NameIn:='AGDigitalInput',ElectricalRefIn:='K2',AddressIn:=1009);
	fbLinearMotorMonitor : FB_EthercatModuleMonitor(NameIn:='AGLinearMotorInput',ElectricalRefIn:='M2',AddressIn:=1003);
	fbSafetyMasterMonitor : FB_EthercatModuleMonitor(NameIn:='SafetyMaster',ElectricalRefIn:='K1',AddressIn:=1001);
	
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	SafetyModuleStatus : ARRAY[0..SafetyModuleArraySize] OF ST_SafetyModule;
	fbsafetyModuleCollector :FB_SafetyModuleCollector;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	EstopArray : ARRAY [0..EstopArraySize] OF ST_EstopFB;
	fbEstopFBCollector : FB_EstopFBCollector;

	fbIDX70 :IDXMotor(ResetBit:=idxCTRL1);
	fbEverest :EverestMC();
	LinearEncoder: AXIS_REF;
	Force: AXIS_REF;
	
	//PowerStatus: AGPowerStatus;
	GetUPSStatus : FB_GetUPSStatus;
	ReadUPSStatus:BOOL := TRUE;
	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	fbAGPowerStatus : fbAGPowerStatus;

	
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	UPSStatus: ST_UPSStatus;
	UPSStatusValid:BOOL;
	
	Instruments :ARRAY[0..4] OF instrument ;
	{attribute 'OPC.UA.DA' := '1'}
	DemoMode: BOOL;
	CurrentInstrument:INT;
	Change_Inst :TON:= (PT:=T#10S,IN:=FALSE);
	CurrentInstName:STRING;
	
	
	BacklashComp : MC_BacklashCompensation;
	BackEn :BOOL;
	Backlashmm:LREAL;
	BacklashDir:BOOL;
	
	ForceAvg : FB_CTRL_MOVING_AVERAGE;
	ForceAvgArray: ARRAY[0..100] OF LREAL;
	ForceAvgParas : ST_CTRL_MOVING_AVERAGE_PARAMS := (
tCtrlCycleTime:= T#100MS,
tTaskCycleTime:= T#10MS,
nSamplesToFilter:=100,
pWorkArray_ADR:= ADR(ForceAvgArray),
nWorkArray_SIZEOF:= 800);


	
	{attribute 'OPC.UA.DA' := '1'}
	IdxEnable:BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	EveEnable:BOOL;
	idxInput AT%I*	:BYTE;
	idxCTRL1 AT%I*:USINT;
//	Distance: LREAL;
	//JogStart: BOOL;
	//StartMove:BOOL;
	//StartEveMove:BOOL;
	//fbMessage : FB_TcMessage;
	//Homed:BOOL;
	//Ready:BOOL;
	//Homing :BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	Estop: BOOL;
	RotationHome :BOOL:=FALSE;
	LinearresetAxis :BOOL:=FALSE;
	RotationresetAxis :BOOL:=FALSE;
	RoboticMode:BOOL;
	RoboticModePosA :REAL :=100;
	RoboticModePosB :REAL :=400;
	ResetTimer: TON :=(PT:=T#5S,IN:=FALSE);
	
LinearEncHome:BOOL;
LinearHomePosition:LREAL;
FBLinearEncHome :MC_Home;

	{attribute 'OPC.UA.DA' := '1'}
	Test_Active:BOOL;
	
	{attribute 'OPC.UA.DA' := '1'}
	LinearAxisState: LinearStates; (*~ (OPC:1:linear axis status ) *)
	{attribute 'OPC.UA.DA' := '1'}
	LinearCommandedPosition:LREAL;
	LinearMovementTarget:LREAL;
	LinearMove:BOOL;
	LinearMoveState: e_MCState;
	{attribute 'OPC.UA.DA' := '1'}
	LinearErrorACK:BOOL:=FALSE;
	{attribute 'OPC.UA.DA' := '1'}
	LinearMovementSpeed:LREAL:=50;
		{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	LinearStatus :ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	{attribute 'OPC.UA.DA.Access' := '1'}
{attribute 'OPC.UA.DA.Description' := 'Position of Linear Stage'}
	LinearPosition  : LREAL;
	linear_reset :TON:= (PT:=T#1S,IN:=FALSE);
	Rotation_reset :TON:= (PT:=T#1S,IN:=FALSE);
	
	{attribute 'OPC.UA.DA' := '0'}
	{attribute 'OPC.UA.DA.StructuredType' := '1'}
	linPositions1 :LinearPositions;
		{attribute 'OPC.UA.DA' := '0'}
	{attribute 'OPC.UA.DA.StructuredType' := '0'}
	linPositions2 :LinearPositions;
	
	

	
	
	RotationStatus: ST_AxisStatus;
	{attribute 'OPC.UA.DA' := '1'}
	RotationPosition: LREAL;
	LinearHome: BOOL;
	{attribute 'OPC.UA.DA' := '1'}
	RotationAxisState: RotationStates;
	{attribute 'OPC.UA.DA' := '1'}
	RotationCommandedPosition: LREAL:=60;
	{attribute 'OPC.UA.DA' := '1'}
	RotationMovementSpeed: LREAL:=20;
	RotationMove: BOOL;
	HomingBusy: BOOL;
	
	fbCoEWrite        : FB_CoEWrite;
	NetId             : T_AmsNetID := ''; 
   Index          : WORD:= 16#10F3;(*CoE object index*)
   SubIndex       : BYTE:=16#01;(*CoE sub index*)
   pDstBuf        : PVOID;(*Contains the address of the buffer for the received data*)
   BufLen         : UDINT;(*Contains the max. number of bytes to be received*)
   Execute        : BOOL;(*Function block execution is triggered by a rising edge at this input.*)
   Timeout        : TIME := DEFAULT_ADS_TIMEOUT;(*States the time before the function is cancelled.*)
   CompleteAccess : BOOL:= FALSE;(*Function block reads the complete object with all sub index*)
   COEData:UINT;
COEString:ARRAY [0..100] of BYTE;
	COEError: BOOL;
	
	MotorPowerRaw :INT;
	AGPowerRaw:INT;
	MotorPowerV :REAL;
	AGPowerV:REAL;



	RotationErrorACK: BOOL;
	SafetyMasterStatus: ST_ethercatStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//standard module monitoring 
fbDigitalInputMonitor();
fbLinearMotorMonitor();
fbSafetyMasterMonitor();
fbSafetyMasterMonitor.GetEthercatStatus(stEthercatStatusOut=>SafetyMasterStatus);

SafetySystem.SetMasterStatus(StEthercatStatusIn:=SafetyMasterStatus);
SafetySystem();
Estop := SafetySystem.GetGlobalEstopStatus(); // true means system running 
//SafetyModules 
AGSafeInputs();
fbsafetyModuleCollector.GetSafetyStatus(StModuleArrayInOut:= SafetyModuleStatus,
 										ModuleArraySizeIn:=SafetyModuleArraySize,
										SafetyModuleRefIn:= AGSafeInputs,
										ModuleIndexIn:=0);
AGSafeOutputs();
fbsafetyModuleCollector.GetSafetyStatus(StModuleArrayInOut:= SafetyModuleStatus,
 										ModuleArraySizeIn:=SafetyModuleArraySize,
										SafetyModuleRefIn:= AGSafeOutputs,
										ModuleIndexIn:=1);
 //EstopGroups 
AGEstop();
OffMountEstop();
fbEstopFBCollector.GetEstopData(SafetyEstopRefIn:= AGEstop,
								stEstopArrayInOut:= EstopArray,
								EstopArraySizeIn:= EstopArraySize,
								EstopIndexIn:=0);
fbEstopFBCollector.GetEstopData(SafetyEstopRefIn:= OffMountEstop,
								stEstopArrayInOut:= EstopArray,
								EstopArraySizeIn:= EstopArraySize,
								EstopIndexIn:=1);
fbEstopFBCollector.MasterDataValid(DataValidIn:= SafetyMasterStatus.DataValid);
// DataCollectors 
fbsafetyModuleCollector(stModuleArrayInOut:= SafetyModuleStatus, ModuleArraySizeIn:=SafetyModuleArraySize);
fbEstopFBCollector(stEstopArrayInOut:= EstopArray, EstopArraySizeIn:= EstopArraySize);




//Linear.ReadStatus();
LinearEncoder.ReadStatus();
Force.ReadStatus();
fbIDX70();// error checking
LinearMotor();
fbEverest();
fbAGPowerStatus();



// AND IdxEnable AND EveEnable
IF DemoMode  AND Change_Inst.Q  THEN
	CurrentInstrument:= (CurrentInstrument+1) MOD 4;
	Change_Inst(IN :=FALSE);
	LinearCommandedPosition:= (CurrentInstrument*75);
	RotationCommandedPosition:= (CurrentInstrument*60)-120;
	CurrentInstName := Instruments[CurrentInstrument].Name;
ELSIF  NOT DemoMode THEN
	CurrentInstName :=' None Selected ';
ELSE 
	Change_Inst(IN :=TRUE);

	
END_IF



ForceAvg(
 Fin:= Force.NcToPlc.ActPos,
stParams:= ForceAvgParas,
eMode:= E_CTRL_MODE.eCTRL_MODE_ACTIVE);
	

	FBLinearENCHome(
	Axis:=LinearEncoder,
	Execute:=LinearEncHome,
	Position:=LinearHomePosition,
	HomingMode:=MC_Direct);
	

BacklashComp(
	Axis:= FbIDX70.Axis,
	Enable := BackEn,
	Backlash :=Backlashmm,
	CompensationInPositiveDirection:=BacklashDir,
	Ramp := 10,DisableMode:=1);
	
GetUPSStatus(sNetId:='',
	Nport:=0,  (* 0 = Windows UPS service / Windows Battery driver  *)
	bEnable:= ReadUPSStatus,
	bValid=>UPSStatusValid,
	stStatus=> UPSStatus);
	




fbCoEWrite(
    NetId          := NetId, 
    Index          := Index, 
    SubIndex       := SubIndex, 
    pSrcBuf        := ADR(COEData), 
    BufLen         := SIZEOF(COEData), 
    Execute        := Execute, 
    Timeout        := Timeout, 
    CompleteAccess := CompleteAccess, 
    Axis           := fbEverest.Axis
);

IF NOT fbCoEWrite.Busy THEN
    COEError        :=fbCoEWrite.Error;
    Execute      := FALSE;
    fbCoEWrite(Execute := Execute, Axis := fbEverest.Axis);
END_IF

// Estop is active low 
IF NOT Estop THEN  //Estop check
	fbIDX70.Estop();// needs implementing  as event and quick stop function
	IdxEnable:=FALSE;
	EveEnable:=FALSE;	
END_IF
LinearMotor.Estop(Execute:= NOT Estop );


fbIDX70.Enable(EnableMotor:= IdxEnable);
LinearMotor.Enable(Execute:= IdxEnable);
fbIDX70.Reset(resetAxis:=LinearresetAxis);
LinearMotor.Reset(Execute := LinearresetAxis);
//HomingBusy := fbIDX70.Home(Execute:=LinearHome);
HomingBusy:= LinearMotor.Home(Execute:= LinearHome,HomePositionIn:= 510.0);
//LinearPosition := fbIDX70.Position();
LinearMotor.GetCurrentPosition(PositionOut=> LinearPosition);
//LinearStatus:= fbIDX70.Status();
LinearMotor.GetStatus(AxisOut=> LinearStatus);
//fbIDX70.MoveTo(
//					Position:=LinearCommandedPosition,
//					Velocity:=LinearMovementSpeed,
//					Execute:=LinearMove,
//					State=> LinearMoveState,
//Target=> LinearMovementTarget);

LinearMotor.MoveTo(
	Execute:= LinearMove,
	TargetPositionIn:= LinearCommandedPosition,
	VelocityIn := LinearMovementSpeed,
	eStateOut=> LinearMoveState);

IF LinearStatus.Error THEN
	LinearAxisState:=linearstates.Error;
ELSIF NOT IdxEnable OR LinearAxisState = linearstates.Error THEN
		LinearAxisState:=linearstates.Initialising;
		
END_IF

CASE(LinearAxisState) OF 
	
	LinearStates.Initialising:
		
		IF  LinearStatus.Operational AND LinearStatus.Homed THEN
			LinearAxisState:=Linearstates.Idle;	
		ELSIF LinearStatus.Operational THEN 
			LinearAxisState:=LinearStates.Start_Homing;
		END_IF
	
	LinearStates.Start_Homing:
		LinearHome:=TRUE;
		LinearAxisState:=LinearStates.Homing;

	LinearStates.Homing:
		IF LinearStatus.Homed AND NOT HomingBusy THEN
			LinearAxisState:=LinearStates.Idle;
			//LinearCommandedPosition:=MovementPositions.linearpos.deployed;
		END_IF
	
	LinearStates.Idle:
		IF ABS(LinearCommandedPosition-LinearPosition)>0.005  THEN
			LinearAxisState:=LinearStates.Start_Move;
		ELSE
			LinearMove:=FALSE;
		END_IF
		
	LinearStates.Start_Move:
			LinearMove:=TRUE;
			LinearAxisState:=LinearStates.Moving; 
				
	Linearstates.Moving:
		
		IF LinearMoveState = e_MCState.Done THEN
			LinearAxisState:=LinearStates.Idle; 
		END_IF
	
	Linearstates.Error:
		IF LinearErrorACK THEN
			LinearresetAxis:=TRUE;
			LinearErrorACK:=FALSE;
			LinearAxisState:= LinearStates.initialising;
		END_IF

	
END_CASE


RotationStatus:= fbEverest.Status();
fbEverest.Enable(EnableMotor:= EveEnable);
fbEverest.Reset(resetAxis:=RotationresetAxis);
fbEverest.Home(Execute:=RotationHome);
RotationPosition := fbEverest.Position();
fbEverest.MoveTo(Position:=RotationCommandedPosition,Velocity:=RotationMovementSpeed,Execute:=RotationMove);

IF RotationStatus.Error THEN
	RotationAxisState:=Rotationstates.Error;
ELSIF NOT EveEnable THEN
		RotationAxisState:=Rotationstates.Initialising;
END_IF


CASE(RotationAxisState) OF 
	
	RotationStates.Initialising:
		
		IF  RotationStatus.Operational THEN
			RotationAxisState:=RotationStates.Start_Homing;
		END_IF
	
	RotationStates.Start_Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=Rotationstates.Idle;
		ELSE
			RotationHome:=TRUE;
			RotationAxisState:=RotationStates.Homing;
		END_IF
	

	RotationStates.Homing:
	IF RotationStatus.Homed THEN
			RotationAxisState:=RotationStates.Idle;
	END_IF
			
		
	
	RotationStates.Idle:
		IF ABS(RotationCommandedPosition-fbEverest.Axis.NcToPlc.SetPos)>0.01 THEN
			RotationAxisState:=RotationStates.Moving;
			RotationMove:=TRUE;
		ELSE 
			RotationMove:=FALSE;
		END_IF
		
			
	RotationStates.Moving:
		IF NOT RotationStatus.HasJob THEN
			RotationAxisState:=	RotationStates.Idle;
		END_IF
	
	RotationStates.Error:
		IF RotationErrorACK THEN
			RotationresetAxis:=TRUE;
			RotationErrorACK:=FALSE;
		END_IF
		
	
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="4283" Count="42" />
      <LineId Id="4559" Count="0" />
      <LineId Id="4326" Count="84" />
      <LineId Id="4412" Count="9" />
      <LineId Id="4558" Count="0" />
      <LineId Id="4553" Count="4" />
      <LineId Id="4422" Count="35" />
      <LineId Id="4459" Count="0" />
      <LineId Id="4552" Count="0" />
      <LineId Id="4460" Count="0" />
      <LineId Id="4472" Count="0" />
      <LineId Id="4477" Count="74" />
      <LineId Id="66" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>